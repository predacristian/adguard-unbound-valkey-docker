name: DNS Stack CI/CD

on:
  workflow_dispatch:
    inputs:
      unbound_version:
        description: 'Unbound version'
        required: false
      adguard_version:
        description: 'AdGuard version'
        required: false
  pull_request:
    branches: [ "main" ]
    paths-ignore:
      - 'README.md'
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
  merge_group:
    branches: [ main ]

concurrency:
  group: dns-stack-ci-cd-${{ github.run_id }}
  cancel-in-progress: true

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    outputs:
      test_tag: ${{ steps.tag.outputs.tag }}
    steps:
    - uses: actions/checkout@v5
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Generate test tag
      id: tag
      run: |
        BRANCH_NAME=${GITHUB_REF##*/}
        CLEAN_BRANCH_NAME=$(echo $BRANCH_NAME | tr '/' '-')
        SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
        echo "tag=${CLEAN_BRANCH_NAME}-${SHORT_SHA}" >> $GITHUB_OUTPUT
    - name: Build test image
      uses: docker/build-push-action@v6
      with:
        context: .
        load: true
        tags: dns-stack-test:${{ steps.tag.outputs.tag }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    - name: Start test container
      run: |
        sudo sysctl -w net.core.rmem_max=8388608
        sudo sysctl -w net.core.wmem_max=8388608
        docker run -d --name dns-stack-test \
          -v ${{ github.workspace }}/tests:/tests \
          dns-stack-test:${{ steps.tag.outputs.tag }}
    - name: Wait for services to be ready
      run: |
        echo "Waiting for services to initialize..."
        sleep 25  # TODO: Replace with health check or log-based readiness
        docker ps
        docker logs dns-stack-test
    - name: Set permissions on test scripts
      run: |
        chmod +x ./tests/test_unbound.sh
        chmod +x ./tests/test_valkey.sh
        chmod +x ./tests/test_adguard.sh
    - name: Run Unbound DNS tests
      id: unbound
      run: docker exec dns-stack-test /tests/test_unbound.sh
    - name: Run Valkey tests
      id: valkey
      run: docker exec dns-stack-test /tests/test_valkey.sh
    - name: Run AdGuard Home tests
      id: adguard
      run: docker exec dns-stack-test /tests/test_adguard.sh
    - name: Test Summary
      if: always()
      run: |
        echo "Test Results Summary:"
        echo "===================="
        echo "Unbound DNS: ${{ steps.unbound.outcome }}"
        echo "Valkey: ${{ steps.valkey.outcome }}"
        echo "AdGuard Home: ${{ steps.adguard.outcome }}"
    - name: Clean up
      if: always()
      run: |
        docker stop dns-stack-test || true
        docker rm dns-stack-test || true

  check-changes:
    needs: build-and-test
    runs-on: ubuntu-latest
    outputs:
      files_changed: ${{ steps.check_files.outputs.changed }}
    steps:
    - uses: actions/checkout@v5
      with:
        fetch-depth: 2
    - name: Check for relevant file changes
      id: check_files
      run: |
        git diff --name-only HEAD^ HEAD > changed_files.txt
        echo "Changed files:"
        cat changed_files.txt
        # Improved recursive detection for config files
        if grep -qE '^(Dockerfile|config/|config/.*|entrypoint\.sh|init-config\.sh)' changed_files.txt; then
          echo "changed=true" >> $GITHUB_OUTPUT
        else
          echo "changed=false" >> $GITHUB_OUTPUT
        fi

  build-and-push:
    needs: [build-and-test, check-changes]
    if: >
      (needs.check-changes.outputs.files_changed == 'true')
      && (github.event_name == 'push' || github.event_name == 'pull_request')
      && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
    - uses: actions/checkout@v5
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Generate unique tag
      id: tags
      run: |
        SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
        VERSION_TAG="build-${SHORT_SHA}"
        echo "version_tag=${VERSION_TAG}" >> $GITHUB_OUTPUT
        echo "build_tag=${VERSION_TAG}-${SHORT_SHA}" >> $GITHUB_OUTPUT
    - name: Build and push
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_DOCKER_NAME }}:latest
          ${{ secrets.DOCKERHUB_DOCKER_NAME }}:${{ steps.tags.outputs.build_tag }}
